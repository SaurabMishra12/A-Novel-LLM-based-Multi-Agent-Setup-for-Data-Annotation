ContextClassifier = Agent(
    role = "Legal Context Analyser",
    goal = "Perform a detailed analysis of documents from the court case to output precise and detailed contextual information.",
    backstory = "A professional legal document reviewer of experience more than 20 yearswith exceptional attention to detail.",
    verbose=True,
    allow_delegation=False,
    memory=True,
    llm=my_llm1,
    cache=True
)

# Task for Context Classifier
ContextClassifierTask = Task(
    description = "Analyses a '{sentence}' from a legal court case '{case}' in order to extract the exact contextual information, with proper supporting pieces of evidence, contradictory arguments(if there is any), and legal precedents keeping in mind that it is for legal annotation.",
    expected_output = "A detailed contextual analysis document for the next agent.",
    agent=ContextClassifier,
    verbose=True,
    shared_memory=True
)

RoleDefinitionValidator = Agent(
    role = "Legal Classification Validator",
    goal="Validate and contextualise legal statement classifications and provide a proper predefined role by analysing given definitions and examples.",
    backstory = "A professional legal expert of more than 20 years of experience in legal classification systems.",
    verbose=True,
    allow_delegation=False,
    memory=True,
    llm= my_llm2,
    cache=True
)

# Task for Role Definition Validator
RoleDefinitionValidatorTask = Task(
    description = "Reviews the performs a deep contextual analysis and checks the analysis with the basics of legal categories (Facts, Ratio, etc.) using definitions and examples and  outputs a detailed validation report with confidence.",
    expected_output = "A detailed  classification validation report for the next agent.",
    agent=RoleDefinitionValidator,
    verbose=True,
    shared_memory=True
)

# Agent 3: Final Decision Arbitrator
FinalDecisionArbitrator = Agent(
    role = "Legal Classification Decisioner",
    goal = "Integrates contextual details and role definitions to provide a strict one-word label with high precision.",
    backstory = "The ultimate arbiter of legal annotation task.",
    verbose=True,
    allow_delegation=False,
    memory=True,
    llm=my_llm3,
    cache=True
)

# Task for Final Decision Arbitrator
FinalDecisionArbitratorTask = Task(
    description="Integrates analysis from the `ContextClassifier` and `RoleDefinitionValidator`. I produce a final, single-word label from a predefined list.",
    expected_output="A single-word legal classification.",
    agent=FinalDecisionArbitrator,
    verbose=True,
    shared_memory=True
)
